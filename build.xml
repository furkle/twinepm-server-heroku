<?xml version="1.0" encoding="UTF-8" ?>
<project name="twinepm-server-heroku" default="run-stable-vm">
    <!-- START VIRTUAL MACHINE TASKS -->

    <!-- Runs from host machine. -->
    <target name="destroy-vm">
        <exec
            passthru="true"
            command="vagrant destroy">
        </exec>
    </target>

    <!-- Runs from host machine. -->
    <target name="run-stable-vm">
        <exec
            passthru="true"
            command="
            TWINEPM_BRANCH=master &amp;&amp;
            export TWINEPM_BRANCH &amp;&amp;
            vagrant up">
        </exec>
    </target>

    <!-- Runs from host machine. -->
    <target name="run-dev-vm">
        <exec
            passthru="true"
            command="
            TWINEPM_BRANCH=dev &amp;&amp;
            export TWINEPM_BRANCH &amp;&amp;
            vagrant up">
        </exec>
    </target>

    <!-- Runs from container host. -->
    <target name="get-host-dependencies">
        <exec
            passthru="true"
            command="
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - &amp;&amp;
            apt-key fingerprint 0EBFCD88 &amp;&amp;
            add-apt-repository
                &quot;deb [arch=amd64]
                https://download.docker.com/linux/ubuntu
                $(lsb_release -cs)
                stable&quot; &amp;&amp;
            apt-get update &amp;&amp;
            apt-get install -y
                docker-ce
                docker-compose">
        </exec>
    </target>

    <!-- END VIRTUAL MACHINE TASKS -->

    <!-- START CONTAINER TASKS -->

    <!-- Runs inside host machine or VM. -->
    <target name="build-container-images">
        <exec
            passthru="true"
            command="
            docker build
                -t twinepm_logic
                /etc/twinepm-server-heroku/src">
        </exec>

        <exec
            passthru="true"
            command="
            docker build
                -t twinepm_postgresql
                /etc/twinepm-server-heroku/postgresql">
        </exec>

        <exec
            passthru="true"
            command="
            docker build
                -t twinepm_redis
                /etc/twinepm-server-heroku/redis">
        </exec>
    </target>

    <target name="remove-container-images">
        <exec
            passthru="true"
            command="docker rmi twinepm_logic">
        </exec>

        <exec
            passthru="true"
            command="docker rmi twinepm_postgresql">
        </exec>

        <exec
            passthru="true"
            command="docker rmi twinepm_redis">
        </exec>
    </target>

    <target name="rebuild-container-images">
        <exec
            passthru="true"
            command="
            phing remove-container-images &amp;&amp;
            phing build-container-images">
        </exec>
    </target>

    <!-- Runs inside host machine or VM. -->
    <target name="run-containers">
        <exec
            passthru="true"
            command="
            docker run
                --name twinepm_logic
                -d
                -p 443:80
                twinepm_logic">
        </exec>

        <exec
            passthru="true"
            command="
            docker run
                --name twinepm_postgresql
                -d
                twinepm_postgresql">
        </exec>

        <exec
            passthru="true"
            command="
            docker run
                --name twinepm_redis
                -d
                twinepm_redis
                redis-server --appendonly yes">
        </exec>
    </target>

    <target name="start-containers">
        <exec
            passthru="true"
            command="docker start twinepm_logic">
        </exec>
            
        <exec
            passthru="true"
            command="docker start twinepm_postgresql">
        </exec>

        <exec
            passthru="true"
            command="docker start twinepm_redis">
        </exec>
    </target>

    <target name="stop-containers">
        <exec
            passthru="true"
            command="docker stop twinepm_logic">
        </exec>

        <exec
            passthru="true"
            command="docker stop twinepm_postgresql">
        </exec>

        <exec
            passthru="true"
            command="docker stop twinepm_redis">
        </exec>
    </target>

    <target name="stop-containers">
        <exec
            passthru="true"
            command="docker stop twinepm_logic">
        </exec>

        <exec
            passthru="true"
            command="docker stop twinepm_postgresql">
        </exec>

        <exec
            passthru="true"
            command="docker stop twinepm_redis">
        </exec>
    </target>

    <target name="remove-containers">
        <exec
            passthru="true"
            command="docker rm twinepm_logic">
        </exec>

        <exec
            passthru="true"
            command="docker rm twinepm_postgresql">
        </exec>

        <exec
            passthru="true"
            command="docker rm twinepm_redis">
        </exec>
    </target>

    <target name="restart-containers">
        <exec
            passthru="true"
            command="
            phing stop-containers &amp;&amp;
            phing remove-containers &amp;&amp;
            phing rebuild-container-images &amp;&amp;
            phing run-containers">
        </exec>
    </target>

    <!-- Runs inside webserver/logic container. -->
    <target name="get-logic-dependencies">
        <exec
            passthru="true"
            command="
            apt-get update &amp;&amp;
            apt-get install -y composer">
        </exec>
    </target>

    <!-- Runs inside webserver/logic container. -->
    <target name="setup-nginx">
        <exec
            passthru="true"
            command="
                printf &quot;
                    user nginx;\n
                    worker_processes 1;\n
                    \n
                    error_log /var/log/nginx/error.log warn;\n
                    pid /var/run/nginx.pid;\n
                    \n
                    events {\n
                        worker_connections 1024;\n
                    }\n
                    \n
                    http {\n
                        include /etc/nginx/mime.types;\n
                        default_type application/octet-stream;\n
                        \n
                        log_format main '\$remote_addr - \$remote_user [\$time_local] \&quot;\$request\&quot;'\n
                                        '\$status \$body_bytes_sent \&quot;\$http_referer\&quot;'\n
                                        '\&quot;\$http_user_agent\&quot; \&quot;\$http_x_forwarded_for\&quot;';\n
                        \n
                        access_log /var/log/nginx/access.log main;\n
                        \n
                        sendfile on;\n
                        \n
                        keepalive_timeout 65;\n
                        \n
                        gzip on;\n
                        \n
                        include /etc/nginx/conf.d/*.conf;\n
                        \n
                        server {\n
                            root /usr/share/nginx/html/;\n
                            \n
                            location / {\n
                                index index.php index.html index.htm;\n
                            }\n
                            \n
                            location ~ [^/]\.php(\\/|\$) {\n
                                root /usr/share/nginx/html/;\n
                                fastcgi_split_path_info ^(.+?\.php)(\\/.*)?$;\n
                                try_files \$fastcgi_script_name =404;\n
                                \n
                                fastcgi_pass unix:/run/php/php7.1-fpm.sock;\n
                                fastcgi_index index.php;\n
                                include fastcgi_params;\n
                                \n
                                # Mitigate https://httpoxy.org/ vulnerabilities\n
                                fastcgi_param HTTP_PROXY \&quot;\&quot;;\n
                                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                                fastcgi_param PATH_INFO $fastcgi_path_info;
                            }\n
                            \n
                            location ~ /\.ht {\n
                                deny all;\n
                            }\n
                        }\n
                    }\n
                &quot; &gt; /etc/nginx/nginx.conf &amp;&amp;

                (head -n -1 /etc/nginx/mime.types; printf &quot;    text/php php php7;\n}&quot;) |
                    tee /etc/nginx/mime.types &amp;&amp;

                echo &quot;&lt;?php require_once '/etc/twinepm-server-heroku/index.php';&quot; ?&gt;
                    /usr/share/nginx/html/index.php &amp;&amp;

                service php7.1-fpm start &amp;&amp;

                echo 'Finished nginx setup.'">
        </exec>
    </target>

    <!-- Runs inside webserver/logic container. -->
    <target name="install-php-packages">
        <exec
            passthru="true"
            command="
            cd /etc/twinepm-server-heroku &amp;&amp;
            composer install --no-plugins --no-scripts">
        </exec>
    </target>

    <!-- END CONTAINER TASKS -->
</project>