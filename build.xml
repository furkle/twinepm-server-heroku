<?xml version="1.0" encoding="UTF-8" ?>
<project name="twinepm-server-heroku" default="run-stable-vm">
    <!-- Runs from host machine. -->
    <target name="destroy-vm">
        <exec
            passthru="true"
            command="vagrant destroy">
        </exec>
    </target>

    <!-- Runs from host machine. -->
    <target name="run-stable-vm">
        <exec
            passthru="true"
            command="
            TWINEPM_BRANCH=master &amp;&amp;
            export TWINEPM_BRANCH &amp;&amp;
            vagrant up">
        </exec>
    </target>

    <!-- Runs from host machine. -->
    <target name="run-dev-vm">
        <exec
            passthru="true"
            command="
            TWINEPM_BRANCH=dev &amp;&amp;
            export TWINEPM_BRANCH &amp;&amp;
            vagrant up">
        </exec>
    </target>

    <!-- Runs from host machine/VM. -->
    <target name="get-vm-dependencies">
        <exec
            passthru="true"
            command="
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - &amp;&amp;
            apt-key fingerprint 0EBFCD88 &amp;&amp;
            add-apt-repository
                &quot;deb [arch=amd64]
                https://download.docker.com/linux/ubuntu
                $(lsb_release -cs)
                stable&quot; &amp;&amp;
            apt-get update &amp;&amp;
            apt-get install -y docker-ce">
        </exec>
    </target>

    <!-- Runs inside host machine or VM. -->
    <target name="build-containers">
        <exec
            passthru="true"
            command="
            cd /etc/twinepm-server-heroku/src &amp;&amp;
            docker build
                --build-arg TWINEPM_BRANCH=$TWINEPM_BRANCH
                --build-arg TWINEPM_BRANCH=$TWINEPM_BRANCH
                --build-arg TWINEPM_REPO_SITE=$TWINEPM_REPO_SITE
                --build-arg TWINEPM_REPO_OWNER=$TWINEPM_REPO_OWNER
                --build-arg TWINEPM_REPO_NAME=$TWINEPM_REPO_NAME
                -t twinepm_logic . &amp;&amp;
            cd ../redis &amp;&amp;
            docker build -t twinepm_redis . &amp;&amp;
            cd ../postgresql &amp;&amp;
            docker build -t twinepm_postgresql .">
        </exec>
    </target>

    <!-- Runs inside webserver/logic container. -->
    <target name="get-logic-dependencies">
        <exec
            passthru="true"
            command="
            apt-get install -y
                software-properties-common
                gnupg
                locales &amp;&amp;
            LANG=en_US.UTF-8 &amp;&amp;
            LANGUAGE=en_US:en &amp;&amp;
            LC_ALL=en_US.UTF-8 &amp;&amp;
            localedef -i en_US -f UTF-8 en_US.UTF-8 &amp;&amp;
            /usr/sbin/update-locale LANG=$LANG &amp;&amp;
            apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4F4EA0AAE5267A6C &amp;&amp;
            add-apt-repository -y ppa:ondrej/php &amp;&amp;
            apt-get update &amp;&amp;
            apt-get install -y
                composer
                php7.1
                php7.1-fpm
                php7.1-mbstring
                php7.1-xml
                php7.1-zip
                unzip
                zip">
        </exec>
    </target>

    <!-- Runs inside webserver/logic container. -->
    <target name="setup-nginx">
        <exec
            passthru="true"
            command="
                echo &quot;
                    fastcgi_param   QUERY_STRING            $query_string;
                    fastcgi_param   REQUEST_METHOD          $request_method;
                    fastcgi_param   CONTENT_TYPE            $content_type;
                    fastcgi_param   CONTENT_LENGTH          $content_length;

                    fastcgi_param   SCRIPT_FILENAME         $document_root$fastcgi_script_name;
                    fastcgi_param   SCRIPT_NAME             $fastcgi_script_name;
                    fastcgi_param   PATH_INFO               $fastcgi_path_info;
                    fastcgi_param   PATH_TRANSLATED         $document_root$fastcgi_path_info;
                    fastcgi_param   REQUEST_URI             $request_uri;
                    fastcgi_param   DOCUMENT_URI            $document_uri;
                    fastcgi_param   DOCUMENT_ROOT           $document_root;
                    fastcgi_param   SERVER_PROTOCOL         $server_protocol;

                    fastcgi_param   GATEWAY_INTERFACE       CGI/1.1;
                    fastcgi_param   SERVER_SOFTWARE         nginx/$nginx_version;

                    fastcgi_param   REMOTE_ADDR             $remote_addr;
                    fastcgi_param   REMOTE_PORT             $remote_port;
                    fastcgi_param   SERVER_ADDR             $server_addr;
                    fastcgi_param   SERVER_PORT             $server_port;
                    fastcgi_param   SERVER_NAME             $server_name;

                    fastcgi_param   HTTPS                   $https;

                    # PHP only, required if PHP was built with --enable-force-cgi-redirect
                    fastcgi_param   REDIRECT_STATUS         200;
                &quot;

                echo &quot;
                    user nginx;
                    worker_processes 1;

                    error_log /var/log/nginx/error.log warn;
                    pid /var/run/nginx.pid;

                    events {
                        worker_connections  1024;
                    }

                    http {
                        include /etc/nginx/mime.types;
                        default_type application/octet-stream;

                        log_format main '\$remote_addr - \$remote_user [\$time_local] \&quot;\$request\&quot;'
                                        '\$status \$body_bytes_sent \&quot;\$http_referer\&quot;'
                                        '\&quot;\$http_user_agent\&quot; \&quot;\$http_x_forwarded_for\&quot;';

                        access_log /var/log/nginx/access.log main;

                        sendfile on;

                        keepalive_timeout 65;

                        gzip on;

                        include /etc/nginx/conf.d/*.conf;
                    }
                &quot;

                rm /usr/share/nginx/html/index.html &amp;&amp;
                echo &quot;&lt;?php require_once '/etc/twinepm-server-heroku/index.php'&gt;&quot; &gt;
                    /usr/share/nginx/html/index.php">
        </exec>
    </target>

    <!-- Runs inside webserver/logic container. -->
    <target name="install-php-packages">
        <exec
            passthru="true"
            command="
            cd /etc/twinepm-server-heroku &amp;&amp;
            composer install --no-plugins --no-scripts">
        </exec>
    </target>

    <!-- Runs inside host machine or VM. -->
    <target name="run-containers">
        <exec
            passthru="true"
            command="
            cd /etc/twinepm-server-heroku/src &amp;&amp;
            docker run --name twinepm_logic -d  -p 443:80 twinepm_logic:latest &amp;&amp;
            cd ../redis &amp;&amp;
            docker run --name twinepm_redis -d twinepm_redis:latest redis-server --appendonly yes &amp;&amp;
            cd ../postgresql &amp;&amp;
            docker run --name twinepm_postgresql -d twinepm_postgresql:latest">
        </exec>
    </target>
</project>