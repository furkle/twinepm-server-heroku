<?xml version="1.0" encoding="UTF-8" ?>
<project name="twinepm-server-heroku" default="run-stable-vm">
    <!-- START VIRTUAL MACHINE TASKS -->

    <!-- Runs from host machine. -->
    <target name="destroy-vm">
        <exec
            passthru="true"
            command="vagrant destroy">
        </exec>
    </target>

    <!-- Runs from host machine. -->
    <target name="run-stable-vm">
        <exec
            passthru="true"
            command="
            TWINEPM_BRANCH=master &amp;&amp;
            export TWINEPM_BRANCH &amp;&amp;
            vagrant up">
        </exec>
    </target>

    <!-- Runs from host machine. -->
    <target name="run-dev-vm">
        <exec
            passthru="true"
            command="
            TWINEPM_BRANCH=dev &amp;&amp;
            export TWINEPM_BRANCH &amp;&amp;
            vagrant up">
        </exec>
    </target>

    <!-- Runs from container host. -->
    <target name="get-host-dependencies">
        <exec
            passthru="true"
            command="
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - &amp;&amp;
            apt-key fingerprint 0EBFCD88 &amp;&amp;
            add-apt-repository
                &quot;deb [arch=amd64]
                https://download.docker.com/linux/ubuntu
                $(lsb_release -cs)
                stable&quot; &amp;&amp;
            apt-get update &amp;&amp;
            apt-get install -y docker-ce &amp;&amp;
            curl -L
                https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname
-s`-`uname -m`
                -o /usr/local/bin/docker-compose &amp;&amp;
            chmod +x /usr/local/bin/docker-compose &amp;&amp;
            curl -L
                https://raw.githubusercontent.com/docker/compose/1.16.1/contrib/completion/bash/docker-compose -o
                /etc/bash_completion.d/docker-compose">
        </exec>
    </target>

    <!-- END VIRTUAL MACHINE TASKS -->

    <!-- START CONTAINER TASKS -->

    <!-- Runs inside host machine or VM. -->
    <target name="build-container-images">
        <exec
            passthru="true"
            command="
            docker build
                -t twinepm_logic
                /etc/twinepm-server-heroku/src">
        </exec>

        <exec
            passthru="true"
            command="
            docker build
                -t twinepm_postgresql
                /etc/twinepm-server-heroku/postgresql">
        </exec>

        <exec
            passthru="true"
            command="
            docker build
                -t twinepm_redis
                /etc/twinepm-server-heroku/redis">
        </exec>
    </target>

    <target name="remove-container-images">
        <exec
            passthru="true"
            command="docker rmi twinepm_logic">
        </exec>

        <exec
            passthru="true"
            command="docker rmi twinepm_postgresql">
        </exec>

        <exec
            passthru="true"
            command="docker rmi twinepm_redis">
        </exec>
    </target>

    <target name="rebuild-container-images">
        <exec
            passthru="true"
            command="
            phing remove-container-images &amp;&amp;
            phing build-container-images">
        </exec>
    </target>

    <!-- Runs inside host machine or VM. -->
    <target name="run-containers">
        <exec
            passthru="true"
            command="
            docker run
                --name twinepm_logic
                -d
                -p 443:80
                twinepm_logic">
        </exec>

        <exec
            passthru="true"
            command="
            docker run
                --name twinepm_postgresql
                -d
                twinepm_postgresql">
        </exec>

        <exec
            passthru="true"
            command="
            docker run
                --name twinepm_redis
                -d
                twinepm_redis
                redis-server --appendonly yes">
        </exec>
    </target>

    <target name="start-containers">
        <exec
            passthru="true"
            command="docker start twinepm_logic">
        </exec>
            
        <exec
            passthru="true"
            command="docker start twinepm_postgresql">
        </exec>

        <exec
            passthru="true"
            command="docker start twinepm_redis">
        </exec>
    </target>

    <target name="stop-containers">
        <exec
            passthru="true"
            command="docker stop twinepm_logic">
        </exec>

        <exec
            passthru="true"
            command="docker stop twinepm_postgresql">
        </exec>

        <exec
            passthru="true"
            command="docker stop twinepm_redis">
        </exec>
    </target>

    <target name="remove-containers">
        <exec
            passthru="true"
            command="docker rm twinepm_logic">
        </exec>

        <exec
            passthru="true"
            command="docker rm twinepm_postgresql">
        </exec>

        <exec
            passthru="true"
            command="docker rm twinepm_redis">
        </exec>
    </target>

    <target name="restart-containers">
        <exec
            passthru="true"
            command="
            phing stop-containers &amp;&amp;
            phing remove-containers &amp;&amp;
            phing rebuild-container-images &amp;&amp;
            phing run-containers">
        </exec>
    </target>

    <target name="install-php-extensions">
        <exec
            passthru="true"
            command="
            { type git; } || {
                apt-get update &amp;&amp;
                apt-get install -y git;
            } &amp;&amp;
            docker-php-ext-install -j$(nproc) mbstring &amp;&amp;
            mkdir /tmp/svr-setup/ &amp;&amp;
            cd /tmp/svr-setup/ &amp;&amp;
            git clone https://github.com/redis/hiredis &amp;&amp;
            cd hiredis &amp;&amp;
            make -j2 &amp;&amp;
            make install &amp;&amp;
            cd .. &amp;&amp;
            git clone https://github.com/nrk/phpiredis &amp;&amp;
            cd phpiredis &amp;&amp;
            phpize &amp;&amp;
            ./configure
                --enable-phpiredis
                --with-hiredis-dir=/usr/local
                --with-php-config=/usr/local/bin/php-config &amp;&amp;
            make -j2 &amp;&amp;
            make install &amp;&amp;
            echo 'extension=phpiredis.so' > $PHP_INI_DIRECTORY/phpiredis.ini &amp;&amp;
            kill -USR2 1 &amp;&amp;
            php --ri phpiredis">
        </exec>
    </target>

    <target name="install-php-packages">
        <exec
            passthru="true"
            command="
            docker-php-ext-install -j$(nproc) mbstring &amp;&amp;
            { type composer; } || {
                apt-get update &amp;&amp;
                apt-get install -y 
                    git
                    unzip
                    zip &amp;&amp;
                    php -r
                        &quot;copy('https://getcomposer.org/installer',
                            '/tmp/composer-setup.php');&quot; &amp;&amp;
                    php /tmp/composer-setup.php
                        --install-dir=/usr/local/bin
                        --filename=composer &amp;&amp;
                    rm /tmp/composer-setup.php;
            } &amp;&amp;
            cd /etc/twinepm-server-heroku &amp;&amp;
            composer install --no-plugins --no-scripts">
        </exec>
    </target>

    <!-- END CONTAINER TASKS -->
</project>